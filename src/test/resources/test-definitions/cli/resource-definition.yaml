#
# Copyright 2022 AppDynamics Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

resources:
  - name: cluster
    count: 3
    childrenDistribution:
      namespace: 'distribution(3, 0, 0)'
      node: 'distribution(5, 2, 10)'
    attributes:
      k8s.cluster.name: '"cluster-".concat(alphanumericSequence("aukus"))'
  - name: namespace
    count: 10
    childrenDistribution:
      resourcequota: 'distribution(2, 2, 1)'
      replicaset: 'distribution(2, 0, 0)'
      workload: 'distribution(3, 5, 5)'
      ingress: 'distribution(3, 0, 0)'
    attributes:
      k8s.namespace.name: 'counter("namespace")'
    attributeOperations:
      - 'copyFromParent("cluster", "k8s.cluster.name")'
  - name: node
    count: 25
    childrenDistribution:
      pod: 'distribution(3, 0, 0)'
    attributes:
      k8s.node.name: 'alphanumericSequence("quad").concat(".node")'
      cloud.provider: 'roundRobin(["AWS"])'
      k8s.node.system.uuid: 'UUIDFromStringCounter("node")'
      cloud.host.instance.id: 'alphanumericSequence("ia1").concat("-").concat(alphanumericSequence("bimstec"))'
      k8s.node.ip.internal: 'IPv4Sequence("10.134.1.11")'
      k8s.node.role: 'roundRobin(["master", "worker"])'
      k8s.node.labels: '{"arch": "amd64", "os": "linux", "role": roundRobin(["data", "app"])}'
    attributeOperations:
      - 'copyFromParent("cluster", "k8s.cluster.name")'
  - name: resourcequota
    count: 25
    attributes:
      k8s.rq.name: 'alphanumericSequence("iea").concat(".resourcequota")'
    attributeOperations:
      - 'copyFromParent("namespace", "k8s.cluster.name")'
      - 'copyFromParent("namespace", "k8s.namespace.name")'
  - name: replicaset
    count: 20
    childrenDistribution:
      pod: 'distribution(3, 15, 15)'
    attributes:
      k8s.replicaset.uid: 'alphanumericSequenceFromEnv()'
      k8s.replicaset.name: 'alphanumericSequence("cern").concat(".replicaset")'
    attributeOperations:
      - 'copyFromParent("namespace", "k8s.cluster.name")'
      - 'copyFromParent("namespace", "k8s.namespace.name")'
  - name: workload
    count: 50
    childrenDistribution:
      pod: 'distribution(1, 10, 5)'
    attributes:
      k8s.workload.name: 'alphanumericSequence("brics").concat(".workload")'
    attributeOperations:
      - 'copyFromParent("namespace", "k8s.cluster.name")'
      - 'copyFromParent("namespace", "k8s.namespace.name")'
  - name: pod
    count: 75
    childrenDistribution:
      container: 'distribution(2, 0, 0)'
    attributes:
      k8s.pod.ip: 'IPv4Sequence("133.29.54.1")'
      k8s.pod.status: 'roundRobin(["Pending","Running","Succeeded","Unknown"])'
      k8s.pod.labels: '{"app": alphanumericSequence("gnrtrx").concat("-service"), "ip": IPv4Sequence("133.45.54.2"), "version": roundRobin(["latest", "22.5.0-142"])}'
    attributeOperations:
      - 'copyFromParent("node", "k8s.cluster.name")'
      - 'copyFromParent("workload", "k8s.namespace.name")'
      - 'copyFromParent("node", "k8s.node.name")'
      - 'copyFromParent("node", "k8s.node.ip.internal")'
      - 'modifyFromParent("node", "k8s.cluster.name", "k8s.pod.name", "counter(\"-pod-\")")'
  - name: deployment
    count: 12
    childrenDistribution:
      replicaset: 'distribution(1, 3, 2)'
    attributes:
      k8s.deployment.name: 'alphanumericSequence("iaea").concat(".replicaset")'
  - name: machine
    count: 80
    childrenDistribution:
      disk: 'distribution(1, 0, 0)'
      network_interface: 'distribution(1, 2, 1)'
      container: 'distribution(1, 2, 1)'
      filesystem: 'distribution(1, 0, 0)'
    attributes:
      host.id: 'alphanumericSequence("iaf3").concat("-").concat(alphanumericSequence("sacep"))'
      host.name: 'alphanumericSequence("icc").concat(".host")'
      host.network.subnet.id: 'alphanumericSequence("in1").concat("-").concat(alphanumericSequence("interpol"))'
      host.network.vpc.id: 'alphanumericSequence("iax").concat("-").concat(alphanumericSequence("unesco"))'
      cloud.provider: 'roundRobin(["aws"])'
  - name: disk
    count: 100
    attributes:
      host.disk.device: '"device-".concat(alphanumericSequence("a3x"))'
    attributeOperations:
      - 'copyFromParent("machine", "host.id")'
  - name: network_interface
    count: 120
    attributes:
      host.network.interface.name: 'alphanumericSequence("ituc").concat(".network")'
    attributeOperations:
      - 'copyFromParent("machine", "host.id")'
  - name: filesystem
    count: 80
    attributes:
      host.filesystem.mount_point: 'counter("/dev/sda")'
      host.filesystem.type: 'roundRobin(["ext2", "ext3", "ext4", "xfs"])'
    attributeOperations:
      - 'copyFromParent("machine", "host.id")'
  - name: container
    count: 150
    attributes:
      container.id: 'alphanumericSequence("ix1").concat("wr1f79").concat(alphanumericSequence("i0q")).concat("1citrusv12307oc1peak")'
      container.id.short: 'alphanumericSequence("ix1").concat("wr1f79").concat(alphanumericSequence("i0q"))'
      container.name: 'alphanumericSequence("tamo").concat(".container")'
      container.image.name: '"hub.docker.com/".concat(roundRobin(["nginx", "mysql", "ubuntu"])).concat("/").concat(alphanumericSequence("a1sat34x"))'
    attributeOperations:
      - 'copyFromParent("pod", "k8s.namespace.name")'
      - 'copyFromParent("pod", "k8s.pod.name")'
      - 'copyFromParent("machine", "host.name")'
  - name: aws_ebs
    count: 50
    attributes:
      volume.id: 'alphanumericSequence("3a1").concat("-volume")'
  - name: aws_lb
    count: 30
    attributes:
      cloud.load_balancer.id: 'alphanumericSequence("zzz").concat(".loadbalancer")'
      cloud.platform: '"aws_application_load_balancer"'
      cloud.region: '"us-east-2"'
      cloud.account.id: '"34668326432433"'
      cloud.network.id: '"75tyhfeufh48rwj498r"'
  - name: aws_rds
    count: 50
    attributes:
      aws.rds.instance.identifier: 'alphanumericSequence("mx5").concat("-rds")'
      aws.rds.id: 'alphanumericSequence("iax").concat("-").concat(alphanumericSequence("aalco"))'
      database.type: 'roundRobin(["MySQL", "Oracle", "MariaDB", "Aurora", "PostgreSQL"])'
  - name: http_backend
    count: 3
    attributes:
      name: '"http_backend-".concat(alphanumericSequence("zombie"))'
  - name: database_backend
    count: 3
    attributes:
      name: '"database_backend-".concat(alphanumericSequence("coushin"))'
  - name: messaging_backend
    count: 3
    attributes:
      name: '"messaging_backend-".concat(alphanumericSequence("msgy"))'
  - name: custom_backend
    count: 3
    attributes:
      type: 'roundRobin(["messaging_backend", "database_backend", "http_backend"])'
  - name: request
    count: 3
    attributes:
      type: 'roundRobin(["HTTP", "JMS", "HTTPS"])'
      async: 'roundRobin(["true", "false"])'
  - name: service_instance
    count: 150
    childrenDistribution:
      instance_endpoint: 'distribution(1, 0, 0)'
    attributes:
      service.instance.id: '"instance.id-".concat(alphanumericSequence("ceewewsdc"))'
      service.name: '"service.name-".concat(alphanumericSequence("ksdj3"))'
      service.namespace: '"service.namespace-".concat(alphanumericSequence("gnrtrvv4"))'
  - name: instance_endpoint
    count: 150
    attributes:
      name: '"instance.endpoint-".concat(alphanumericSequence("sdjhs"))'
    attributeOperations:
      - 'copyFromParent("service_instance", "service.instance.id")'
      - 'copyFromParent("service_instance", "service.name")'
      - 'copyFromParent("service_instance", "service.namespace")'
  - name: service
    count: 5
    childrenDistribution:
      business_transaction: 'distribution(2, 0, 0)'
      service_endpoint: 'distribution(2, 0, 0)'
    attributes:
      name: '"apm-service-".concat(alphanumericSequence("fskjv"))'
      service.namespace: '"service.namespace-".concat(alphanumericSequence("gnrtrvv4"))'
      service.network: '[roundRobin(["ClusterIP", "NodePort"]), IPv4Sequence("172.20.181.75"), counter("808")]'
  - name: business_transaction
    count: 10
    attributes:
      name: '"bt.name-".concat(alphanumericSequence("risk"))'
      service.name: '"bt.service-".concat(alphanumericSequence("xorql")).concat("-name")'
    attributeOperations:
      - 'copyFromParent("service", "service.namespace")'
  - name: service_endpoint
    count: 10
    attributes:
      name: '"endpoint.name-".concat(alphanumericSequence("shallow"))'
      service.name: '"endpoint.service-".concat(alphanumericSequence("deep")).concat("-name")'
    attributeOperations:
      - 'copyFromParent("service", "service.namespace")'
  - name: ingress
    count: 30
    attributes:
      k8s.ingress.uid: '"ingress-".concat(alphanumericSequence("a1z"))'
      load_balancer.dnsname: 'alphanumericSequence("zzz").concat(".loadbalancer")'
    attributeOperations:
      - 'copyFromParent("namespace", "k8s.cluster.name")'
      - 'copyFromParent("namespace", "k8s.namespace.name")'
